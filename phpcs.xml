<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="WordPress" namespace="WordPressCS\WordPress" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">

	<description>WordPress Coding Standards</description>

	<rule ref="WordPress">
		<!-- This project needs to comply with naming standards from PHPCS, not WP. -->
		<exclude name="WordPress.files.FileName"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName"/>F

		<!-- While conditions with assignments are a typical way to walk the token stream. -->
		<exclude name="Generic.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition"/>

		<!-- The code in this project is run in the context of PHPCS, not WP. -->
		<exclude name="WordPress.DateTime"/>
		<exclude name="WordPress.DB"/>
		<exclude name="WordPress.Security"/>
		<exclude name="WordPress.WP"/>

		<!-- Linting is done in a separate CI job, no need to duplicate it. -->
		<exclude name="Generic.PHP.Syntax"/>

		<!-- WordPressCS still has a PHP 5.4 minimum. -->
		<exclude name="Modernize.FunctionCalls.Dirname"/>
	</rule>

	<!-- Check code for cross-version PHP compatibility. -->
	<config name="testVersion" value="5.4-"/>
	<rule ref="PHPCompatibility">
		<!-- Exclude PHP constants back-filled by PHPCS. -->
		<exclude name="PHPCompatibility.Constants.NewConstants.t_finallyFound"/>
		<exclude name="PHPCompatibility.Constants.NewConstants.t_yieldFound"/>
		<exclude name="PHPCompatibility.Constants.NewConstants.t_ellipsisFound"/>
		<exclude name="PHPCompatibility.Constants.NewConstants.t_powFound"/>
		<exclude name="PHPCompatibility.Constants.NewConstants.t_pow_equalFound"/>
		<exclude name="PHPCompatibility.Constants.NewConstants.t_spaceshipFound"/>
		<exclude name="PHPCompatibility.Constants.NewConstants.t_coalesceFound"/>
		<exclude name="PHPCompatibility.Constants.NewConstants.t_coalesce_equalFound"/>
		<exclude name="PHPCompatibility.Constants.NewConstants.t_yield_fromFound"/>
	</rule>

	<!-- Enforce PSR1 compatible namespaces. -->
	<rule ref="PSR1.Classes.ClassDeclaration"/>

	<!-- Enforce that classes are abstract or final. -->
	<rule ref="Universal.Classes.RequireFinalClass">
		<!-- ... with the exception of four sniffs which are known to be extended by external standards. -->
		<exclude-pattern>/WordPress/Sniffs/NamingConventions/ValidHookNameSniff\.php$</exclude-pattern>
		<exclude-pattern>/WordPress/Sniffs/Security/(EscapeOutput|NonceVerification|ValidatedSanitizedInput)Sniff\.php$</exclude-pattern>
	</rule>

	<!-- Enforce that methods in traits are always final. -->
	<rule ref="Universal.FunctionDeclarations.RequireFinalMethodsInTraits"/>


	<!--
	#############################################################################
	SNIFF SPECIFIC CONFIGURATION
	#############################################################################
	-->

	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<property name="alignMultilineItems" value="!=100"/>
			<property name="exact" value="false" phpcs-only="true"/>
		</properties>
	</rule>


<!--	<rule ref="./vendor/wp-coding-standards/wpcs/WordPress-Core">-->
<!--		<exclude name="Generic.Arrays.DisallowShortArraySyntax" />-->
<!--		<exclude name="Generic.Commenting.DocComment.MissingShort" />-->
<!--		<exclude name="WordPress.PHP.DisallowShortTernary" />-->
<!--	</rule>-->

<!--	<rule ref="./vendor/wp-coding-standards/wpcs/WordPress-Docs">-->
<!--		<exclude-pattern>tests/*</exclude-pattern>-->
<!--	</rule>-->
<!--	<rule ref="./vendor/wp-coding-standards/wpcs/WordPress-Extra">-->
<!--		&lt;!&ndash; Prevent duplicate messages + deprecation notice from deprecated sniff. &ndash;&gt;-->
<!--		<exclude name="WordPress.WP.TimezoneChange.timezone_change_date_default_timezone_set"/>-->
<!--		<exclude name="WordPress.WP.TimezoneChange.DeprecatedSniff"/>-->
<!--	</rule>-->

	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="fuse-block"/>
				<element value="default"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.Files.FileName.InvalidClassFileName">
		<exclude-pattern>tests/*</exclude-pattern>
		<exclude-pattern>src/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.WP.GlobalVariablesOverride.Prohibited">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>
	<rule ref="WordPress.WP.AlternativeFunctions">
		<exclude-pattern>bin/*</exclude-pattern>
	</rule>
	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
		<exclude-pattern>src/*</exclude-pattern>
	</rule>

	<!-- Enforce PascalCase file names in src/ only. -->
	<rule ref="Squiz.Classes.ClassFileName">
		<include-pattern>src/*</include-pattern>
	</rule>

	<!-- Allow NotHyphenatedLowercase for TestCase class -->
	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
		<exclude-pattern>tests/php/TestCase.php</exclude-pattern>
		<exclude-pattern>tests/php/DataProvider.php</exclude-pattern>
	</rule>

	<!-- Limit max. consecutive blank lines to 1 instead of 2. -->
	<rule ref="Squiz.WhiteSpace.FunctionSpacing">
		<properties>
			<property name="spacing" value="1"/>
			<property name="spacingBeforeFirst" value="1"/>
			<property name="spacingAfterLast" value="0"/>
		</properties>
	</rule>

	<arg value="ps"/>
	<arg name="extensions" value="php"/>
	<file>.</file>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="./"/>

	<!-- Check up to 20 files simultaneously. -->
	<arg name="parallel" value="20"/>

	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>
	<exclude-pattern>*/build/*</exclude-pattern>
	<exclude-pattern type="relative">*/build/*</exclude-pattern>
	<exclude-pattern type="relative">^logs/*</exclude-pattern>
	<exclude-pattern>/build/admin/*.asset.php</exclude-pattern>
	<exclude-pattern>/build/blocks/**/*.asset.php</exclude-pattern>
	<exclude-pattern>/build/public/*.asset.php</exclude-pattern>

</ruleset>
